{-# OPTIONS --type-in-type #-}
module Examples where

open import Poly
open Poly.Poly
open import Base
open import Data.Nat
open import Data.Product
open import Agda.Builtin.Sigma
open import Data.List
open import Data.Sum.Base using (_‚äé_; inj‚ÇÅ ; inj‚ÇÇ)
open import Data.Fin.Base using (Fin ; suc; zero ; from‚Ñï)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; trans; sym; cong; cong‚ÇÇ ; cong-app; subst)

-- y¬≤ + 2y + 1
ex : Poly
ex = record { pos = Fin 4 ; dir = Œª { zero ‚Üí Fin 0 
                                ; (suc zero) ‚Üí Fin 1 
                                ; (suc (suc zero )) ‚Üí Fin 1 
                                ; (suc (suc (suc zero))) ‚Üí Fin 2 }}


-- y¬≤ + 1
ex2 : Poly
ex2 = record { pos = Fin 2 ; dir = Œª {zero ‚Üí Fin 0
                                    ; (suc zero) ‚Üí Fin 2} }


_ : Poly
_ = ex √ó‚Çö ex


pp : Poly -- y¬≤ + 1
pp = record { pos = Pos‚ÇÇ ; dir = Œª{ P‚ÇÅ ‚Üí Dir‚ÇÇ
                                 ; P‚ÇÇ ‚Üí Dir‚ÇÄ }}


-- evaluating PP ‚Ñï = ‚Ñï¬≤ + 1 =  ‚Ñï √ó ‚Ñï + 1
-- so choose a pair 
_ : ‚¶Ö pp ‚¶Ü ‚Ñï
_ = P‚ÇÅ , Œª{ D‚ÇÅ ‚Üí 4
          ; D‚ÇÇ ‚Üí 7 }
-- or chose none!          
_ : ‚¶Ö pp ‚¶Ü ‚Ñï
_ = P‚ÇÇ , Œª ()


data Foo : Set where
    Bar Baz : Foo

-- enumerate all elements of ‚¶Ö pp ‚¶Ü Foo
-- ‚âÖ Option (Foo √ó Foo)
_ : List (‚¶Ö pp ‚¶Ü Foo)
_ = (P‚ÇÅ , (Œª { D‚ÇÅ ‚Üí Bar
            ; D‚ÇÇ ‚Üí Bar })) ‚à∑ 
    (P‚ÇÅ , (Œª{ D‚ÇÅ ‚Üí Bar
            ; D‚ÇÇ ‚Üí Baz }))  ‚à∑  
    (P‚ÇÅ , (Œª{ D‚ÇÅ ‚Üí Baz
            ; D‚ÇÇ ‚Üí Bar })) ‚à∑ 
    (P‚ÇÅ , (Œª{ D‚ÇÅ ‚Üí Baz
            ; D‚ÇÇ ‚Üí Baz })) ‚à∑ 
    (P‚ÇÇ , Œª()) ‚à∑ []   



qq : Poly -- y¬≤ + 2y + 1
qq = record { pos = Pos‚ÇÑ ; dir = Œª{ P‚ÇÅ ‚Üí Dir‚ÇÇ
                                  ; P‚ÇÇ ‚Üí Dir‚ÇÅ
                                  ; P‚ÇÉ ‚Üí Dir‚ÇÅ
                                  ; P‚ÇÑ ‚Üí Dir‚ÇÄ } }

_ : ‚¶Ö qq ‚¶Ü ‚Ñï
_ = P‚ÇÇ , Œª{ D‚ÇÅ ‚Üí 7 }                                 

-- poly morphism from y¬≤ + 1 to y¬≤ + 2y + 1 (or y¬≤ + y + y + 1)
_ : Poly[ pp , qq ]
_ = record { onPos = Œª{ P‚ÇÅ ‚Üí P‚ÇÅ
                      ; P‚ÇÇ ‚Üí P‚ÇÑ} ;  -- This maps positions y¬≤ to y¬≤ and 1 to 1
                      
             onDir = Œª{ P‚ÇÅ ‚Üí Œª{ D‚ÇÅ ‚Üí D‚ÇÇ
                              ; D‚ÇÇ ‚Üí D‚ÇÅ } -- inverts the directions from qq's y¬≤ to pp's y¬≤
                      ; P‚ÇÇ ‚Üí Œª() }}       --   


-- another poly morphism from y¬≤ + 1 to y¬≤ + 2y + 1
_ : Poly[ pp , qq ]
_ = record { onPos = Œª{ P‚ÇÅ ‚Üí P‚ÇÇ
                      ; P‚ÇÇ ‚Üí P‚ÇÉ } -- maps to the 2 inner terms (ys)
           ; onDir = Œª{ P‚ÇÅ ‚Üí Œª{ D‚ÇÅ ‚Üí D‚ÇÇ }
                      ; P‚ÇÇ ‚Üí Œª{ D‚ÇÅ ‚Üí  {! !} }}} -- not possible to map from 1 direction to 0 directions!


ùïê : Poly -- 1y¬π = y
ùïê = record { pos = Pos‚ÇÅ ; dir = Œª x ‚Üí Dir‚ÇÅ }


-- enumerate all elements of pp (y¬≤ + 1)
_ : elem pp
_ = P‚ÇÅ , D‚ÇÅ

_ : elem pp
_ = P‚ÇÅ , D‚ÇÇ

_ : elem pp
_ = P‚ÇÇ , {!   !} -- Can't represent the position with no directions..

_ : elem ex
_ = suc zero , zero

_ : elem (ex ‚äé‚Çö ex)
_ = inj‚ÇÅ ((suc zero)) , zero

xx : Poly -- y¬≥ + y
xx = record { pos = Pos‚ÇÇ ; dir = Œª{ P‚ÇÅ ‚Üí Dir‚ÇÉ
                                  ; P‚ÇÇ ‚Üí Dir‚ÇÅ } }
yy : Poly -- y‚Å¥ + y¬≤ + 1
yy = record { pos = Pos‚ÇÉ ; dir = Œª{ P‚ÇÅ ‚Üí Dir‚ÇÑ
                                  ; P‚ÇÇ ‚Üí Dir‚ÇÇ
                                  ; P‚ÇÉ ‚Üí Dir‚ÇÄ } } 


-- xx √ó yy = y‚Å∑ + y‚Åµ + y¬≥ + y‚Åµ + y¬≥ + y = y‚Å∑ + 2y‚Åµ + 2y¬≥ + y
xxyy : Poly
xxyy = xx √ó‚Çö yy

_ : elem xxyy
_ = (P‚ÇÅ , P‚ÇÅ) , inj‚ÇÇ D‚ÇÉ

_ : elem xxyy
_ = (P‚ÇÇ , P‚ÇÉ) , inj‚ÇÅ D‚ÇÅ

_ : elem xxyy
_ = (P‚ÇÅ , P‚ÇÉ) , inj‚ÇÅ D‚ÇÇ

_ : ‚¶Ö xxyy ‚¶Ü ‚Ñï
_ = (P‚ÇÅ , P‚ÇÇ) , Œª{ (inj‚ÇÅ D‚ÇÅ) ‚Üí 1
                 ; (inj‚ÇÅ D‚ÇÇ) ‚Üí 2
                 ; (inj‚ÇÅ D‚ÇÉ) ‚Üí 3
                 ; (inj‚ÇÇ D‚ÇÅ) ‚Üí 4
                 ; (inj‚ÇÇ D‚ÇÇ) ‚Üí 5 }


-- Poly should also act on Functions from Set to Set
f : Foo ‚Üí ‚Ñï
f = Œª{ Bar ‚Üí 1
     ; Baz ‚Üí 7 }

lf : ‚¶Ö xx ‚¶Ü Foo ‚Üí ‚¶Ö xx ‚¶Ü ‚Ñï
lf = lift xx f

xxfoo : ‚¶Ö xx ‚¶Ü Foo
xxfoo = P‚ÇÅ , Œª{ D‚ÇÅ ‚Üí Bar
              ; D‚ÇÇ ‚Üí Baz
              ; D‚ÇÉ ‚Üí Bar }

xx‚Ñï : ‚¶Ö xx ‚¶Ü ‚Ñï
xx‚Ñï = P‚ÇÅ , Œª{ D‚ÇÅ ‚Üí 1
            ; D‚ÇÇ ‚Üí 7
            ; D‚ÇÉ ‚Üí 1 }

exx : ‚¶Ö xx ‚¶Ü ‚Ñï 
exx = lf xxfoo


_ : exx ‚â° xx‚Ñï
_ = {! cong‚ÇÇ ? ? !}



_ : {I : Set} ‚Üí (I ‚âà Œ£ I (Œª _ ‚Üí Unit))
_ = record { 
    to = Œª i ‚Üí i , unit ; 
    from = Œª iu  ‚Üí proj‚ÇÅ iu ; 
    from‚àòto = Œª i ‚Üí refl ; 
    to‚àòfrom = Œª{ (i , unit) ‚Üí refl}}


_ : Poly ‚âà Œ£[ i ‚àà Set ] ( i ‚Üí Set)
_ = record { 
    to = Œª { (pos‚ÇÅ ‚ñπ dir‚ÇÅ) ‚Üí pos‚ÇÅ , dir‚ÇÅ} ; 
    from = Œª{ (fst‚ÇÅ , snd‚ÇÅ) ‚Üí fst‚ÇÅ ‚ñπ snd‚ÇÅ }; 
    from‚àòto = Œª { (pos‚ÇÅ ‚ñπ dir‚ÇÅ) ‚Üí refl }; 
    to‚àòfrom = Œª { (fst‚ÇÅ , snd‚ÇÅ) ‚Üí refl } }


-- recall qq =  y¬≤ + 2y + 1
_ : ‚¶Ö qq ‚¶Ü Unit
_ = P‚ÇÅ , Œª { D‚ÇÅ ‚Üí unit
           ; D‚ÇÇ ‚Üí unit }
-- P := Œ£ I (Œª i ‚Üí Set)
-- I ‚âà ‚¶Ö p ‚¶Ü 1



Z : {p : Poly} ‚Üí (pos p) ‚âà ‚¶Ö p ‚¶Ü Unit -- the indexing set is isomorphic to the polynomial evaluated at 1, ex  p(y) = 2y¬≤ + 3y + 1  and p(1) = 2 + 3 + 1 = 7 
Z { p }  = record { 
    to = Œª posp ‚Üí posp , Œª x ‚Üí unit ; 
    from = Œª{ pair ‚Üí fst pair }; 
    from‚àòto = Œª posp ‚Üí refl ; 
    to‚àòfrom = Œª { ( posp , posptoUnit) ‚Üí {! cong‚ÇÇ _,_ {posp} {posp} {Œª _ ‚Üí unit} ? ?!} }
    } 
data Zero : Set where

-- P(0) yields only the constants 
_ : ‚¶Ö qq ‚¶Ü Zero
_ = P‚ÇÑ , Œª ()
-- SyÀ¢ ‚Üí Ty·µó



module CompositionExample where
    -- y¬≤ + 1 
    p : Poly
    p = Pos‚ÇÇ ‚ñπ Œª{ P‚ÇÅ ‚Üí Dir‚ÇÇ
                ; P‚ÇÇ ‚Üí Dir‚ÇÄ}

    -- 2y¬≥
    q : Poly
    q =  Pos‚ÇÇ ‚ñπ Œª{ P‚ÇÅ ‚Üí Dir‚ÇÉ
                 ; P‚ÇÇ ‚Üí Dir‚ÇÉ}

    -- (y¬≤ + 1) ‚àò‚Çö 2y¬≥ = (2y¬≥)¬≤ + 1 = 4y‚Å∂ + 1 = y‚Å∂ + y‚Å∂ + y‚Å∂ + y‚Å∂ + 1
    -- Draw the corrolla forrest for this example
    p‚àòq : Poly
    p‚àòq = p ‚àò‚Çö q

    -- for positions, you have to choose an element of i : (pos p) or i : Pos‚ÇÇ
    -- AND also a function from (dir p) i ‚Üí (pos q), a map from DIRECTIONS of a p point i TO POINTS of q
    -- glue a point from q to the tip of an arrow of a point in p

    -- the first selection is the p point, i
    -- the second selection is the gluing map from arrows of i to points of q
    -- the third selection is which i arrow to choose
    -- the fourth selection is which arrow to choose from the point

    -- select a position in p, i
    -- select a map from directions of position i to positions in q
    -- select an i arrow
    -- select an i q arrow
    _ : elem p‚àòq
    _ = (P‚ÇÅ , Œª{ D‚ÇÅ ‚Üí P‚ÇÅ
                  ; D‚ÇÇ ‚Üí P‚ÇÅ}) , D‚ÇÅ , D‚ÇÇ

    _ : elem p‚àòq
    _ = (P‚ÇÅ , Œª{ D‚ÇÅ ‚Üí P‚ÇÅ
                  ; D‚ÇÇ ‚Üí P‚ÇÅ}) , D‚ÇÅ , D‚ÇÅ

    _ : elem p‚àòq
    _ = (P‚ÇÅ , Œª{ D‚ÇÅ ‚Üí P‚ÇÅ
                  ; D‚ÇÇ ‚Üí P‚ÇÅ}) , D‚ÇÅ , D‚ÇÉ

    _ : elem p‚àòq
    _ = (P‚ÇÅ , Œª{ D‚ÇÅ ‚Üí P‚ÇÅ
                  ; D‚ÇÇ ‚Üí P‚ÇÅ}) , D‚ÇÇ , D‚ÇÅ

    _ : elem p‚àòq
    _ = (P‚ÇÅ , Œª{ D‚ÇÅ ‚Üí P‚ÇÅ
                  ; D‚ÇÇ ‚Üí P‚ÇÅ}) , D‚ÇÇ , D‚ÇÉ
    
    _ : elem p‚àòq
    _ = (P‚ÇÅ , Œª{ D‚ÇÅ ‚Üí P‚ÇÅ
                  ; D‚ÇÇ ‚Üí P‚ÇÅ}) , D‚ÇÇ , D‚ÇÉ

    _ : elem p‚àòq
    _ = (P‚ÇÇ , Œª()) , {!   !} , {!   !}

module CompositionExample2 where
    -- xx = y¬≥ + 1
    -- yy = y‚Å¥ + y¬≤ + 1

    yy‚àòxx : Poly
    yy‚àòxx = yy ‚àò‚Çö xx

    _ : elem yy‚àòxx
    _ = (P‚ÇÅ , -- selecting y‚Å¥
        (Œª{ D‚ÇÅ ‚Üí P‚ÇÅ -- y¬≥
          ; D‚ÇÇ ‚Üí P‚ÇÅ -- y¬≥
          ; D‚ÇÉ ‚Üí P‚ÇÅ -- y¬≥
          ; D‚ÇÑ ‚Üí P‚ÇÅ})) -- y¬≥
        -- P‚ÇÅ and this map yield y¬π¬≤
            , (D‚ÇÅ  -- 4 options
            , D‚ÇÅ)  -- 3 options


